import numpy as np

class LinearRegression():
    def __init__(self, learning_rate=0.01, num_of_iteration=1000):
        
        self.learning_rate = learning_rate
        self.num_of_iteration = num_of_iteration

    def fit(self, X, Y):
        # Specifying number of dependent variable (training) and independent variable (features)
        self.m, self.n =X.shape # Specifying the number of rows and column

        # Initializing the gradient (weight) and intercept (bias)

        self.w = np.zeros(self.n)
        self.b = 0
        self.X = X
        self.Y = Y

        # Implementing Gradient Descent

        for i in range(self.num_of_iteration):
            self.weights_update()

    def weights_update(self,):
        Y_prediction = self.predict(self.X)

        # Calculation of partial  derivatives
        dw = -(2*(self.X.T).dot(self.Y - Y_prediction))/self.m
        db = -2*np.sum(self.Y - Y_prediction)/self.m

        # The weights update
        self.w = self.w - self.learning_rate*dw
        self.b = self.b - self.learning_rate*db  

    def predict(self, X):
        return X.dot(self.w) + self.b
